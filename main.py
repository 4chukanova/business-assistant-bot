import logging
import openai
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CommandHandler, ContextTypes
import os

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
TARIFF_COST = int(os.getenv("TARIFF_COST"))

openai.api_key = OPENAI_API_KEY
subscribers = set()
knowledge_base = []

SYSTEM_PROMPT = """
–¢—ã ‚Äî –±–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –∏–¥–µ–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ñ–∞–∫—Ç–æ–≤. –ù–µ —Ñ–∞–Ω—Ç–∞–∑–∏—Ä—É–µ—à—å, –Ω–µ –¥–æ–¥—É–º—ã–≤–∞–µ—à—å. –ü–æ–º–æ–≥–∞–µ—à—å —É–≤–∏–¥–µ—Ç—å —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞ –∏ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞. –°—Ç–∏–ª—å ‚Äî –ø—Ä—è–º–æ–π, —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π, –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π.
"""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in subscribers:
        await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –æ—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É: {TARIFF_COST}‚ÇΩ/–º–µ—Å.")
    else:
        await update.message.reply_text("–¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –±–∏–∑–Ω–µ—Å-–∏–¥–µ—é –Ω–∞ —Ä–∞–∑–±–æ—Ä.")

async def add_knowledge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    if not context.args:
        return await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∑–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
    knowledge = " ".join(context.args)
    knowledge_base.append(knowledge)
    await update.message.reply_text("–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.")

async def show_knowledge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    if not knowledge_base:
        return await update.message.reply_text("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
    kb = "\n---\n".join(knowledge_base)
    await update.message.reply_text(f"–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n{kb}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in subscribers:
        return await update.message.reply_text("–û—Ñ–æ—Ä–º–∏ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
    user_message = update.message.text
    response = openai.ChatCompletion.create(
        model="gpt-4-turbo",
        messages=[
            {"role": "system", "content": SYSTEM_PROMPT + "\n–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π:\n" + "\n".join(knowledge_base)},
            {"role": "user", "content": user_message}
        ]
    )
    reply = response["choices"][0]["message"]["content"]
    await update.message.reply_text(reply)

async def subscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    subscribers.add(user_id)
    await update.message.reply_text("–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–∏–∑–Ω–µ—Å-–∏–¥–µ–∏.")

async def unsubscribe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    subscribers.discard(user_id)
    await update.message.reply_text("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

def main():
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–¥–æ–±–∞–≤–∏—Ç—å_–∑–Ω–∞–Ω–∏–µ", add_knowledge))
    app.add_handler(CommandHandler("–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å_–±–∞–∑—É", show_knowledge))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–∏–∑–Ω–µ—Å-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω üöÄ")
    app.run_polling()

if __name__ == "__main__":
    main()
